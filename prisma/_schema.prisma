generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_CONNECTION_STRING")
}

model users {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  password      String          @db.VarChar(255)
  userType      USER_TYPES      @default(USER)
  team          teams?          @relation(fields: [teamId], references: [id])
  teamId        Int?            @db.Int()
  status        STATUS          @default(INACTIVE)
  createdAt     DateTime?       @default(now()) @db.DateTime(6)
  updatedAt     DateTime?       @default(now()) @db.DateTime(6)
  rmRelease     rmRelease[]
  wipCollection wipCollection[]
  qcBy          wipCollection[] @relation(name: "qcBy")
  grn           grn[]
}

model teams {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  users    users[]
  villages villages[]
}

model products {
  id            Int                  @id @default(autoincrement())
  productCode   String               @db.VarChar(255)
  productName   String               @db.VarChar(255)
  category      productCategories    @relation(fields: [categoryId], references: [id])
  categoryId    Int                  @db.Int()
  subCategory   productSubCategories @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int                  @db.Int()
  rmRelease     rmRelease[]
  wipCollection wipCollection[]
}

model productCategories {
  id           Int        @id @default(autoincrement())
  categoryName String     @db.VarChar(255)
  products     products[]
}

model productSubCategories {
  id              Int        @id @default(autoincrement())
  subCategoryName String     @db.VarChar(255)
  products        products[]
}

model colors {
  id              Int             @id @default(autoincrement())
  colorName       String          @db.VarChar(255)
  colorCategory   colorCategories @relation(fields: [colorCategoryId], references: [id])
  colorCategoryId Int             @db.Int()
  rmRelease       rmRelease[]
  wipCollection   wipCollection[]
  grn             grn[]
}

model colorCategories {
  id                Int      @id @default(autoincrement())
  colorCategoryName String   @db.VarChar(255)
  colors            colors[]
}

model villages {
  id             Int        @id @default(autoincrement())
  villageCode    String     @db.VarChar(255)
  villageName    String     @db.VarChar(255)
  team           teams      @relation(fields: [assignedTeamId], references: [id])
  assignedTeamId Int        @db.Int()
  artisans       artisans[]
}

model artisans {
  id            Int             @id @default(autoincrement())
  employeeId    String          @db.VarChar(255)
  password      String          @default("helloworld") @db.VarChar(50)
  name          String          @db.VarChar(255)
  village       villages        @relation(fields: [villageId], references: [id])
  villageId     Int             @db.Int()
  rmRelease     rmRelease[]
  wipCollection wipCollection[]
}

model rmPackageSizes {
  id            Int         @id @default(autoincrement())
  packageSize   String      @db.VarChar(255)
  packageUnit   String      @db.VarChar(10)
  packageWeight Float       @db.Float()
  rmRelease     rmRelease[]
}

model rmRelease {
  id             Int            @id @default(autoincrement())
  user           users          @relation(fields: [issuedBy], references: [id])
  issuedBy       Int            @db.Int()
  issuedAt       DateTime       @db.DateTime(6)
  color          colors         @relation(fields: [colorId], references: [id])
  colorId        Int            @db.Int()
  rmPackageSizes rmPackageSizes @relation(fields: [packageSize], references: [id])
  packageSize    Int            @db.Int()
  quantity       Float          @db.Float()
  product        products?      @relation(fields: [forProduct], references: [id])
  forProduct     Int?           @db.Int()
  artisan        artisans       @relation(fields: [issuedTo], references: [id])
  issuedTo       Int            @db.Int()
  geoCoordinates String         @db.VarChar(255)
}

model wipCollection {
  id                Int      @id @default(autoincrement())
  qcUser            users    @relation(fields: [qcBy], references: [id], name: "qcBy")
  qcBy              Int      @db.Int()
  user              users    @relation(fields: [collectedBy], references: [id])
  collectedBy       Int      @db.Int()
  collectedAt       DateTime @db.DateTime(6)
  artisan           artisans @relation(fields: [artisanId], references: [id])
  artisanId         Int      @db.Int()
  product           products @relation(fields: [productId], references: [id])
  productId         Int      @db.Int()
  color             colors   @relation(fields: [colorId], references: [id])
  colorId           Int      @db.Int()
  quantityUnits     Float    @db.Float()
  quantityWeights   Float    @db.Float()
  rejectedUnits     Float    @db.Float()
  toBeRepairedUnits Float    @db.Float()
  rmWaste           Float    @db.Float()
  geoCoordinates    String   @db.VarChar(255)
}

model grn {
  id       Int       @id @default(autoincrement())
  user     users     @relation(fields: [userId], references: [id])
  userId   Int       @db.Int()
  grnType  GRN_TYPES
  date     DateTime  @db.DateTime(6)
  color    colors    @relation(fields: [colorId], references: [id])
  colorId  Int       @db.Int()
  quantity Float     @db.Float()
}

enum USER_TYPES {
  USER
  ADMIN
}

enum STATUS {
  ACTIVE
  INACTIVE
}

enum GRN_TYPES {
  RELEASE
  RETURN
}
