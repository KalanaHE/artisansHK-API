generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "windows", "linux-musl"]
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DB_CONNECTION_STRING")
}

model users {
  id                            Int                          @id @default(autoincrement())
  name                          String                       @db.VarChar(255)
  email                         String                       @unique @db.VarChar(255)
  password                      String                       @db.VarChar(200)
  userType                      USER_TYPES                   @default(GENERAL_EMPLOYEE)
  team                          teams?                       @relation(fields: [teamId], references: [id])
  teamId                        Int?                         @db.Int()
  status                        USER_STATUS                  @default(INACTIVE)
  createdAt                     DateTime?                    @default(now()) @db.DateTime(3)
  updatedAt                     DateTime?                    @default(now()) @db.DateTime(3)
  rmRelease                     rmRelease[]
  finishedProductsCollection    finishedProductsCollection[]
  IssuerInventoryTransactions   inventoryTransactions[]      @relation("issuerUser")
  ReceiverInventoryTransactions inventoryTransactions[]      @relation("receiverUser")
}

model teams {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  users    users[]
  villages villages[]
}

enum USER_TYPES {
  ADMIN
  TEAM_LEAD
  GENERAL_EMPLOYEE
  QC_USER
  INVENTORY_RECEPTIONIST
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

model products {
  id                         Int                          @id @default(autoincrement())
  productCode                String                       @db.VarChar(255)
  productName                String                       @db.VarChar(255)
  category                   productCategories            @relation(fields: [categoryId], references: [id])
  categoryId                 Int                          @db.Int()
  subCategory                productSubCategories         @relation(fields: [subCategoryId], references: [id])
  subCategoryId              Int                          @db.Int()
  rmRelease                  rmRelease[]
  finishedProductsCollection finishedProductsCollection[]
  inventoryTransactions      inventoryTransactions[]
}

model productCategories {
  id           Int        @id @default(autoincrement())
  categoryName String     @db.VarChar(255)
  products     products[]
}

model productSubCategories {
  id              Int        @id @default(autoincrement())
  subCategoryName String     @db.VarChar(255)
  products        products[]
}

model colors {
  id                         Int                          @id @default(autoincrement())
  colorName                  String                       @db.VarChar(255)
  colorCategory              colorCategories              @relation(fields: [colorCategoryId], references: [id])
  colorCategoryId            Int                          @db.Int()
  rmRelease                  rmRelease[]
  finishedProductsCollection finishedProductsCollection[]
  inventoryTransactions      inventoryTransactions[]
}

model colorCategories {
  id                Int      @id @default(autoincrement())
  colorCategoryName String   @db.VarChar(255)
  colors            colors[]
}

model villages {
  id             Int        @id @default(autoincrement())
  villageCode    String     @db.VarChar(255)
  villageName    String     @db.VarChar(255)
  team           teams      @relation(fields: [assignedTeamId], references: [id])
  assignedTeamId Int        @db.Int()
  artisans       artisans[]
}

model artisans {
  id                         Int                          @id @default(autoincrement())
  employeeId                 String                       @db.VarChar(255)
  name                       String                       @db.VarChar(255)
  village                    villages                     @relation(fields: [villageId], references: [id])
  villageId                  Int                          @db.Int()
  rmRelease                  rmRelease[]
  finishedProductsCollection finishedProductsCollection[]
  inventoryTransactions      inventoryTransactions[]
}

model rmReleasePackageSizes {
  id                    Int                     @id @default(autoincrement())
  packageSizeName       String                  @db.VarChar(255)
  packageWeight         Float                   @db.Float()
  rmRelease             rmRelease[]
  inventoryTransactions inventoryTransactions[]
}

model rmRelease {
  id                    Int                   @id @default(autoincrement())
  user                  users                 @relation(fields: [issuedBy], references: [id])
  issuedBy              Int                   @db.Int()
  issuedAt              DateTime              @db.DateTime(3)
  color                 colors                @relation(fields: [colorId], references: [id])
  colorId               Int                   @db.Int()
  rmReleasePackageSizes rmReleasePackageSizes @relation(fields: [packageSize], references: [id])
  packageSize           Int                   @db.Int()
  quantity              Float                 @db.Float()
  product               products?             @relation(fields: [forProduct], references: [id])
  forProduct            Int?                  @db.Int()
  artisan               artisans              @relation(fields: [issuedTo], references: [id])
  issuedTo              Int                   @db.Int()
  geoCoordinates        String?               @db.VarChar(255)
  timestamp             DateTime              @default(now()) @db.DateTime(3)
}

model finishedProductsCollection {
  id             Int      @id @default(autoincrement())
  user           users    @relation(fields: [collectedBy], references: [id])
  collectedBy    Int      @db.Int()
  collectedAt    DateTime @db.DateTime(3)
  color          colors   @relation(fields: [colorId], references: [id])
  colorId        Int      @db.Int()
  quantity       Float    @db.Float()
  product        products @relation(fields: [productId], references: [id])
  productId      Int      @db.Int()
  artisan        artisans @relation(fields: [collectedFrom], references: [id])
  collectedFrom  Int      @db.Int()
  geoCoordinates String?  @db.VarChar(255)
  timestamp      DateTime @default(now()) @db.DateTime(3)
}

model inventoryTransactions {
  id              Int                         @id @default(autoincrement())
  transactionType INVENTORY_TRANSACTION_TYPES

  Issuer   users? @relation("issuerUser", fields: [issuer], references: [id])
  Receiver users? @relation("receiverUser", fields: [receiver], references: [id])
  issuer   Int    @db.Int()
  receiver Int    @db.Int()

  color                 colors                 @relation(fields: [colorId], references: [id])
  colorId               Int                    @db.Int()
  rmReleasePackageSizes rmReleasePackageSizes? @relation(fields: [packageSize], references: [id])
  packageSize           Int?                   @db.Int()
  product               products?              @relation(fields: [productId], references: [id])
  productId             Int?                   @db.Int()
  artisan               artisans?              @relation(fields: [artisanId], references: [id])
  artisanId             Int?                   @db.Int()
  isRejected            Boolean?               @default(false)
  isTrainee             Boolean?               @default(false)
  quantity              Float                  @db.Float()
  timestamp             DateTime               @default(now()) @db.DateTime(3)
}

enum INVENTORY_TRANSACTION_TYPES {
  IN
  OUT
}
